<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:flex="http://www.springframework.org/schema/flex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/flex 
		http://www.springframework.org/schema/flex/spring-flex-1.0.xsd">

	<!-- Defines the remoting adapter, which intercepts inbound & outbound messages, 
		and routes them thruogh dpHibernate -->
	<bean id="dpHibernateRemotingAdapter"
		class="org.springframework.flex.core.ManageableComponentFactoryBean">
		<constructor-arg value="org.dphibernate.adapters.RemotingAdapter" />
		<property name="properties">
			<value>
				{"dpHibernate" :
				{
				"serializerFactory" :
				"org.dphibernate.serialization.SpringContextSerializerFactory"
				}
				}
			</value>
		</property> 
	</bean>
	
	<!-- <context:component-scan base-package="es.prueba" /> -->
	
	<bean id="dpHibernateMessagingAdapter"
		class="org.springframework.flex.core.ManageableComponentFactoryBean">
		<constructor-arg value="org.dphibernate.adapters.MessagingAdapter" />
	</bean>
	<!-- Provides a basic service for lazy loading operations through dpHibernate. 
		It's also exported as a remoting destination, which makes it accessible to 
		flex clients -->
	<bean id="dataAccessService" class="org.dphibernate.services.SpringLazyLoadService"
		autowire="constructor">
		<flex:remoting-destination />
	</bean>
	<!-- ProxyBatchLoader enabled batched loading of objects. A single request 
		is sent for many objects, rather than several individual requests. This is 
		optional, but provides significant performance improvements -->
	<bean id="proxyBatchLoader" class="org.dphibernate.services.ProxyBatchLoader"
		autowire="constructor" />
	<!-- Required -->
	<bean id="hibernateSessionFilter"
		class="org.dphibernate.filters.SpringHibernateSessionServletFilter" />
	<!-- The main serializer. Converts outbound POJO's to ASObjects with dpHibernate 
		proxies for lazy loading. Required -->
	<bean id="dpHibernateSerializer" class="org.dphibernate.serialization.HibernateSerializer"
		scope="prototype">
		<property name="pageSize" value="10" />
	</bean>
	<bean id="dpHibernateDeserializer" class="org.dphibernate.serialization.HibernateDeserializer"
		scope="prototype" />

	<!-- Handles entity updates (CRUD). Required if using entity persistence. -->
	<bean id="objectChangeUpdater"
		class="org.dphibernate.persistence.state.AuthenticatedObjectChangeUpdater"
		scope="prototype" />
	<!--  
	    Used in update process, for resolving proxies back to the entity 
	  -->
	  <bean id="hibernateProxyResolver" class="org.dphibernate.persistence.state.DbProxyResolver" scope="prototype">
	    <constructor-arg ref="sessionFactory" />
	  </bean>

	<!-- Set up the dpHibernate adapter to be the default adapter for BlazeDS -->
	<flex:message-broker services-config-path="/WEB-INF/flex/services-config.xml">
		<flex:remoting-service default-adapter-id="dpHibernateRemotingAdapter"
			default-channels="my-amf,my-secure-amf" />
	</flex:message-broker>

	<flex:remoting-destination ref="orionService"
		service-adapter="dpHibernateRemotingAdapter" /> 
		
	
</beans>